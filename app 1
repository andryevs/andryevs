import UIKit

class ScheduleViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {

    let tableView = UITableView()
    let scheduleData = [
        ["day": "пн 3", "status": "Неактивный", "time": "", "hours": ""],
        ["day": "вт 4", "status": "Активный", "time": "17:08–21:19", "hours": "4 ч"],
        ["day": "ср 5", "status": "Активный", "time": "18:00–22:00", "hours": "4 ч"],
        ["day": "чт 6", "status": "Активный", "time": "14:09–14:10", "hours": "0 ч"],
        ["day": "чт 6", "status": "Активный", "time": "14:10–20:08", "hours": "6 ч", "location": "СПБ Ленинский пр-кт 64к1"],
        ["day": "пт 7", "status": "Активный", "time": "11:00–15:00", "hours": "4 ч", "location": "СПБ Ленинский пр-кт 64к1"],
        ["day": "пт 7", "status": "Неактивный", "time": "17:00–23:00", "hours": ""],
        ["day": "сб 8", "status": "Активный", "time": "17:00–21:00", "hours": "4 ч"],
        ["day": "вс 9", "status": "Активный", "time": "17:00–22:00", "hours": "5 ч"]
    ]

    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        setupNavigationBar()
    }

    func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(ScheduleCell.self, forCellReuseIdentifier: "ScheduleCell")
        tableView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(tableView)

        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }

    func setupNavigationBar() {
        navigationItem.title = "Июнь"
        let todayButton = UIBarButtonItem(title: "Сегодня", style: .plain, target: self, action: nil)
        navigationItem.leftBarButtonItem = todayButton
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return scheduleData.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ScheduleCell", for: indexPath) as! ScheduleCell
        let data = scheduleData[indexPath.row]
        cell.dayLabel.text = data["day"]
        cell.statusLabel.text = data["status"]
        cell.timeLabel.text = data["time"]
        cell.hoursLabel.text = data["hours"]
        cell.locationLabel.text = data["location"]
        return cell
    }
}

class ScheduleCell: UITableViewCell {

    let dayLabel = UILabel()
    let statusLabel = UILabel()
    let timeLabel = UILabel()
    let hoursLabel = UILabel()
    let locationLabel = UILabel()

    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        setupViews()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func setupViews() {
        let stackView = UIStackView(arrangedSubviews: [dayLabel, statusLabel, timeLabel, hoursLabel, locationLabel])
        stackView.axis = .vertical
        stackView.spacing = 8
        stackView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(stackView)

        NSLayoutConstraint.activate([
            stackView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),
            stackView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),
            stackView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            stackView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16)
        ])
    }
} 
